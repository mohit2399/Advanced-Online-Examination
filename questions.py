# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui_questions.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QPushButton, QMainWindow, QGroupBox, QRadioButton, QVBoxLayout, QHBoxLayout 
from PyQt5.QtCore import QSize
import mysql.connector
from mysql.connector import connection, errorcode
from PyQt5.QtWidgets import *
# from ui_admin_dashboard import Ui_Admin_dashboard
from faculty_dashboard import Ui_Admin_dashboard
DURATION = 10

def sec_to_min(secs: int):
    mins = secs // 60
    secs = secs % 60
    minsec = f'{mins:02}:{secs:02}'
    return minsec

class Ui_Questions(object):
    def setupUi(self, Questions):
        
        Questions.setObjectName("Questions")
        Questions.resize(1200, 720)
        
        
        self.centralwidget = QtWidgets.QWidget(Questions)
        self.centralwidget.setStyleSheet("background-color: rgb(45, 45, 75);")
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame_2 = QtWidgets.QFrame(self.frame)
        self.frame_2.setMinimumSize(QtCore.QSize(0, 60))
        self.frame_2.setMaximumSize(QtCore.QSize(16777215, 40))
        self.frame_2.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout.addWidget(self.frame_2)
        self.frame_3 = QtWidgets.QFrame(self.frame)
        self.frame_3.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame_3)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.scrollArea = QtWidgets.QScrollArea(self.frame_3)
        self.scrollArea.setStyleSheet("QScrollBar:vertical {\n"
"border:none;\n"
"background-color:rgb(59,59,90);\n"
"width: 14px;\n"
"margin: 15px 0 15px 0;\n"
"border-radius:0px;\n"
"}")
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 999, 1200))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.scrollAreaWidgetContents)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.frame_4 = QtWidgets.QFrame(self.scrollAreaWidgetContents)
        self.frame_4.setMinimumSize(QtCore.QSize(0, 2500))
        self.frame_4.setStyleSheet("")
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.horizontalLayout_2.addWidget(self.frame_4)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout_2.addWidget(self.scrollArea)
        self.verticalLayout.addWidget(self.frame_3)
        self.horizontalLayout.addWidget(self.frame)

        self.time_left = DURATION
        self.myTimer = QtCore.QTimer()
        self.timerLabel = QtWidgets.QLabel(self.frame_2)
        self.timerLabel.setText("01:00")
        self.timerLabel.move(1000, 20)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.timerLabel.setFont(font)
        self.timerLabel.setStyleSheet("background-color:rgba(0,0,0,0);\n"
"border: none;\n"
"color:rgba(255, 0, 15, 230);\n"
"")
        self.myTimer.timeout.connect(self.timerTimeout)
        self.myTimer.start(1000)

        Questions.setCentralWidget(self.centralwidget)

        self.retranslateUi(Questions)
        self.showQuestions()
        QtCore.QMetaObject.connectSlotsByName(Questions)

    def retranslateUi(self, Questions):
        _translate = QtCore.QCoreApplication.translate
        Questions.setWindowTitle(_translate("Questions", "MainWindow"))


    def timerTimeout(self):
        self.time_left -=1
        marks = 0
        if self.time_left == 0:
            # print(self.radioButton1.isChecked())
            # print(str(self.choices[0].text()))

            try:
                mydb = connection.MySQLConnection(
                    database = 'online_examination_system',
                    host = '127.0.0.1',
                    user = 'root',
                    password = 'HSbF6@123$'
                )
            except mysql.connector.Error as err:
                print(err)
            access_correct = ('SELECT option_correct from table_questions')
            cursor = mydb.cursor()
            cursor.execute(access_correct)
            i = 0
            for x in cursor.fetchall():
                if str(self.choices[i].text()) == x[0]:
                    marks += 1
                i += 1
            print(marks)


            self.time_left = DURATION
            self.dashboard = QtWidgets.QMainWindow() 
            self.ui = Ui_Admin_dashboard()
            self.ui.setupUi(self.dashboard)
            self.dashboard.show()
            
            # self.close()
        self.update_gui()
    
    def update_gui(self):
        minsec = sec_to_min(self.time_left)
        self.timerLabel.setText(minsec)

    def showQuestions(self):
        try:
            mydb = connection.MySQLConnection(
                database = 'online_examination_system',
                host = '127.0.0.1',
                user = 'root',
                password = 'HSbF6@123$'
            )
        except mysql.connector.Error as err:
            print(err)
        
        access_question = ('SELECT questions, option_a, option_b, option_c, option_d from table_questions')
        cursor = mydb.cursor()
        cursor.execute(access_question)
        
        self.vbox = QVBoxLayout(self.frame_4)
        self.vbox = QVBoxLayout()
        
        i = 0
        count = 1
        self.choices = []
        for x in cursor.fetchall():
            
            ques = x[0]
            option_a = x[1]
            option_b = x[2]
            option_c = x[3]
            option_d = x[4]
            ch = 'a'
            ch2 = 'b'
            ch3 = 'c'
            ch4 = 'd'
            self.ques_label = QLabel(self.frame_4)
            self.ques_label.setText(str(i + 1) + ". " + ques)
            self.ques_label.setGeometry(QtCore.QRect(20, 130 * i + 10, 1100, 30))
            font = QtGui.QFont()
            font.setPointSize(12)
            font2 = QtGui.QFont()
            font2.setPointSize(11)
            self.ques_label.setFont(font)
            self.ques_label.setStyleSheet("background-color:rgba(0,0,0,0);\n"
"border: none;\n"
"color:rgba(255, 255, 255, 230);\n"
"")
            self.opt1 = QLabel(self.frame_4)
            
            self.opt1.setText(ch + ". " + option_a)
            self.opt1.setGeometry(QtCore.QRect(25, 130 * i + 35, 800, 20))
            self.opt1.setStyleSheet("background-color:rgba(0,0,0,0);\n"
"border: none;\n"
"color:rgba(255, 255, 255, 230);\n"
"")
            self.opt1.setFont(font2)
            count += 1
            self.opt2 = QLabel(self.frame_4)
            
            self.opt2.setText(ch2 + ". " + option_b)
            
            self.opt2.setGeometry(QtCore.QRect(25, 130 * i + 55, 800, 20))
            self.opt2.setStyleSheet("background-color:rgba(0,0,0,0);\n"
"border: none;\n"
"color:rgba(255, 255, 255, 230);\n"
"")
            self.opt2.setFont(font2)
            count += 1
            self.opt3 = QLabel(self.frame_4)
            
            self.opt3.setText(ch3 + ". " + option_c)
            self.opt3.setGeometry(QtCore.QRect(25, 130 * i + 75, 800, 20))
            self.opt3.setFont(font2)
            self.opt3.setStyleSheet("background-color:rgba(0,0,0,0);\n"
"border: none;\n"
"color:rgba(255, 255, 255, 230);\n"
"")
            count += 1
            self.opt4= QLabel(self.frame_4)
            
            self.opt4.setText(ch4 + ". " + option_d)
            self.opt4.setGeometry(QtCore.QRect(25, 130 * i + 95, 800, 20))
            self.opt4.setFont(font2)
            self.opt4.setStyleSheet("background-color:rgba(0,0,0,0);\n"
"border: none;\n"
"color:rgba(255, 255, 255, 230);\n"
"")

            self.choice = QLineEdit(self.frame_4)
            self.choice.setGeometry(QtCore.QRect(25, 130 * i + 120, 80, 25))
            self.choice.setStyleSheet("background-color:rgba(0,0,0,0);\n"
"border: none;\n"
"border-bottom: 2px solid rgba(118, 125, 142, 160);\n"
"color:rgba(255, 255, 255, 230);\n"
"padding-bottom:7px;")
            self.choice.setFont(font2)
            # self.choice.setObjectName("choice" + str(i))
            self.vbox.addWidget(self.ques_label)
            self.vbox.addWidget(self.opt1)
            self.vbox.addWidget(self.opt2)
            self.vbox.addWidget(self.opt3)
            self.vbox.addWidget(self.opt4)
            self.vbox.addWidget(self.choice)
            self.choices.append(self.choice)
            i += 1


        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        finishButton = QPushButton(self.frame_4)
        finishButton.setText("Finish")
        finishButton.setFont(font)

        finishButton.setStyleSheet("background-color: rgb(55, 175, 230);\n"
"border-radius:5px;")
        finishButton.setGeometry(QtCore.QRect(500, 2450, 80, 30))
        self.vbox.addWidget(finishButton)
        submitButton = QPushButton(self.frame_4)
        submitButton.setText("Submit")
        submitButton.setFont(font)
        submitButton.setStyleSheet("background-color: rgb(80, 210, 40);\n"
        "border-radius: 5px;")
        submitButton.setGeometry(QtCore.QRect(640, 2450, 80, 30))
        # submitButton.hide()
        self.vbox.addWidget(submitButton)
        # self.vbox.addWidget(hbox)

        finishButton.clicked.connect(self.showDialog)
        submitButton.clicked.connect(self.showSubmitDialog)
    def showDialog(self):
        msgBox = QMessageBox()
        msgBox.setText("Some questions are left, Do you want to submit?")
        msgBox.setWindowTitle("Warning!!!")
        msgBox.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
    #     msgBox.buttonClicked.connect(msgButtonClick)
        returnValue = msgBox.exec_()

        if returnValue == QMessageBox.Ok:
            print('Submit Clicked')
            marks = 0
            try:
                mydb = connection.MySQLConnection(
                    database = 'online_examination_system',
                    host = '127.0.0.1',
                    user = 'root',
                    password = 'HSbF6@123$'
                )
            except mysql.connector.Error as err:
                print(err)
            access_correct = ('SELECT option_correct from table_questions')
            cursor = mydb.cursor()
            cursor.execute(access_correct)
            i = 0
            for x in cursor.fetchall():
                if str(self.choices[i].text()) == x[0]:
                    marks += 1
                i += 1
            self.dashboard = QtWidgets.QMainWindow() 
            self.ui = Ui_Admin_dashboard()
            self.ui.setupUi(self.dashboard)
            self.dashboard.show()
            
            self.close()
    # def msgButtonClick(self):
    #     print("Button Clicked is:")

    def showSubmitDialog(self):
        msgBox = QMessageBox()
        msgBox.setText("Are you sure?")
        msgBox.setWindowTitle("Submission")
        msgBox.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        returnValue = msgBox.exec_()
        if returnValue == QMessageBox.Ok:
            print('Ok Clicked')
            marks = 0
            try:
                mydb = connection.MySQLConnection(
                    database = 'online_examination_system',
                    host = '127.0.0.1',
                    user = 'root',
                    password = 'HSbF6@123$'
                )
            except mysql.connector.Error as err:
                print(err)
            access_correct = ('SELECT option_correct from table_questions')
            cursor = mydb.cursor()
            cursor.execute(access_correct)
            i = 0
            for x in cursor.fetchall():
                if str(self.choices[i].text()) == x[0]:
                    marks += 1
                i += 1

            add_data = ("INSERT INTO marks_table (student_id, exam_name, score, correct_questions, wrong_questions, max_marks) VALUES (%i, %s, %i, %i, %i, %i)")
            data = (6, "Computer Networks", marks, marks, 20 - marks, 20)
            
            self.dashboard = QtWidgets.QMainWindow() 
            self.ui = Ui_Admin_dashboard()
            self.ui.setupUi(self.dashboard)
            self.dashboard.show()